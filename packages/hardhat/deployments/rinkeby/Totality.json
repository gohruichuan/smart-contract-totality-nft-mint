{
  "address": "0xAb25Bb47aC8dE87C245F9D91f479e8bA210A32e6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GIFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIMIT_PER_MINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRIVATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenQuantity",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "receivers",
          "type": "address[]"
        }
      ],
      "name": "gift",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "giftedAmountMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "nonce",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenQuantity",
          "type": "uint256"
        }
      ],
      "name": "presaleBuy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presaleLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "privateAmountMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicAmountMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "URI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePresaleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleSaleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1d0f36eac028a1f0251dd24b18b81bd0c782f603d86977d84c998ba785101971",
  "receipt": {
    "to": null,
    "from": "0xfe1dB923FEb6056a9eD7f04562D1FaaDd2eA9Cdd",
    "contractAddress": "0xAb25Bb47aC8dE87C245F9D91f479e8bA210A32e6",
    "transactionIndex": 4,
    "gasUsed": "3066309",
    "logsBloom": "0x
    "blockHash": "0xe90927cb5d6ad5fa065e36df7ddef50e8c013305b31118d3271d7087b33c41bb",
    "transactionHash": "0x1d0f36eac028a1f0251dd24b18b81bd0c782f603d86977d84c998ba785101971",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 9544987,
        "transactionHash": "0x1d0f36eac028a1f0251dd24b18b81bd0c782f603d86977d84c998ba785101971",
        "address": "0xAb25Bb47aC8dE87C245F9D91f479e8bA210A32e6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fe1db923feb6056a9ed7f04562d1faadd2ea9cdd"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xe90927cb5d6ad5fa065e36df7ddef50e8c013305b31118d3271d7087b33c41bb"
      }
    ],
    "blockNumber": 9544987,
    "cumulativeGasUsed": "8671089",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "63946178c7ca0a7475728286592ace7b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.7+commit.b8d736ae\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GIFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIMIT_PER_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenQuantity\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"}],\"name\":\"gift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giftedAmountMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"nonce\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenQuantity\",\"type\":\"uint256\"}],\"name\":\"presaleBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateAmountMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicAmountMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePresaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baseURI()\":{\"details\":\"Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/YourCollectible.sol\":\"Totality\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\"},\"@openzeppelin/contracts/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0x1efcb1ccef6b3bce65467c4b704cec8d0582e35ff48352269ba8cda4b54ae3da\"},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\ncontract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xb046d18f9d09683ca1c0ed6d80c61da8a8a7d9b30bad70a17b898538683eff74\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfa152b6e88a1dc50780e8f1580426dc23ad2e1e2c2f086a088adf206a202f453\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/EnumerableSet.sol\\\";\\nimport \\\"../../utils/EnumerableMap.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(_baseURI).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(_baseURI, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    function _approve(address to, uint256 tokenId) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0xfc398838759c3248bdca40f7bc060e789c8d715df22f9eee7494bcafe14fa1b8\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xaf936da92f3a9a4f98b237323b5eb1d813fb86c4d07a184beba7027cf0509ba3\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3636662804cd8f474536b2875a9038a4c3fb91879f1bbff48af5c3f140fcd2f0\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe7f984cedc00a138dc27f263c73c32ba9a4b2fd23b6c34ac46f46c074b943538\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\\n    external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x321ee37ef4925020aa818a03ec7fe48e057561f65ab009a84f6c20c86026ade7\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\",\"keccak256\":\"0x2d68b8e6425249cd05cc0a66ea50cb5b8d10cbdac59c6de834e1002232813faf\"},\"@openzeppelin/contracts/utils/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        return _get(map, key, \\\"EnumerableMap: nonexistent key\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\\n    }\\n}\\n\",\"keccak256\":\"0x244e4b74b17716120cf28e58636f11c699b8c0c94628bd952a95cee038d7e32b\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xb2a11b236f073662f5a196995863f51c11d006bf7c3de158b316dfa1506c4b79\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = byte(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x79484115dbfa737054f73e041009a02eeb434dd81be5d684bf4255ad3b5ab558\"},\"contracts/YourCollectible.sol\":{\"content\":\"pragma solidity >=0.6.0 <=0.8.0;\\r\\n//SPDX-License-Identifier: MIT\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\r\\n//learn more: https://docs.openzeppelin.com/contracts/3.x/erc721\\r\\n\\r\\n// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two\\r\\n\\r\\ncontract Totality is ERC721, Ownable {\\r\\n    using ECDSA for bytes32;\\r\\n    address payable private constant TREASURY_WALLET = 0x836D5a18960f7Ab7dCF3261248B85838475f060C;\\r\\n    address private _signerAddress = 0x7e3999B106E4Ef472E569b772bF7F7647D8F26Ba;\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIds;\\r\\n    string private _tokenBaseURI =\\r\\n        \\\"https://api-nft-placeholder.herokuapp.com/api/metadata/\\\";\\r\\n\\r\\n    constructor() public ERC721(\\\"Totality\\\", \\\"Solar\\\") {\\r\\n        _setBaseURI(_tokenBaseURI);\\r\\n    }\\r\\n\\r\\n    uint256 public constant GIFT = 88;\\r\\n    uint256 public constant PRIVATE = 800;\\r\\n    uint256 public constant PUBLIC = 8000;\\r\\n    uint256 public constant MAX_SUPPLY_LIMIT = GIFT + PRIVATE + PUBLIC;\\r\\n    uint256 public constant PRICE = 0.08 ether;\\r\\n    uint256 public constant LIMIT_PER_MINT = 5;\\r\\n\\r\\n    // mapping(address => bool) public presalerList; // stores presale wallet addresses\\r\\n    // mapping(address => uint256) public presalerListPurchases; // stores presale number of purchases\\r\\n\\r\\n    uint256 public requested;\\r\\n    uint256 public giftedAmountMinted;\\r\\n    uint256 public publicAmountMinted;\\r\\n    uint256 public privateAmountMinted;\\r\\n    // uint256 public presalePurchaseLimit = 2;\\r\\n    bool public presaleLive;\\r\\n    bool public saleLive;\\r\\n    bool public locked;\\r\\n\\r\\n    modifier notLocked() {\\r\\n        require(!locked, \\\"Contract metadata methods are locked\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // function removeFromPresaleList(address[] calldata entries)\\r\\n    //     external\\r\\n    //     onlyOwner\\r\\n    // {\\r\\n    //     for (uint256 i = 0; i < entries.length; i++) {\\r\\n    //         address entry = entries[i];\\r\\n    //         require(entry != address(0), \\\"NULL_ADDRESS\\\");\\r\\n    //         require(presalerList[entry], \\\"PRESALER_DOESNT_EXIST\\\");\\r\\n\\r\\n    //         presalerList[entry] = false;\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    function presaleBuy(bytes calldata signature, string calldata nonce, uint256 tokenQuantity) external payable {\\r\\n        require(!saleLive && presaleLive, \\\"PRESALE_CLOSED\\\");\\r\\n        // require(totalSupply() < MAX_SUPPLY_LIMIT, \\\"OUT_OF_STOCK\\\");\\r\\n        require( privateAmountMinted + tokenQuantity <= PRIVATE, \\\"EXCEED_PRIVATE\\\");\\r\\n        require( PRICE * tokenQuantity <= msg.value, \\\"INSUFFICIENT_ETH\\\");\\r\\n        require(matchAddresSigner(hashTransaction(msg.sender, tokenQuantity, nonce), signature), \\\"DIRECT_MINT_DISALLOWED\\\");\\r\\n\\r\\n        privateAmountMinted += tokenQuantity;\\r\\n\\r\\n        for (uint256 i = 0; i < tokenQuantity; i++) {\\r\\n            _safeMint(msg.sender, totalSupply() + 1);\\r\\n        }\\r\\n        (bool success,) = TREASURY_WALLET.call{value:msg.value}(\\\"\\\");\\r\\n        require( success, \\\"could not send\\\");\\r\\n    }\\r\\n\\r\\n    function hashTransaction( address sender, uint256 qty, string memory nonce) private pure returns (bytes32) {\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\r\\n                keccak256(abi.encodePacked(sender, qty, nonce))\\r\\n            )\\r\\n        );\\r\\n        return hash;\\r\\n    }\\r\\n\\r\\n    function matchAddresSigner(bytes32 hash, bytes memory signature) private view returns (bool)\\r\\n    {\\r\\n        return _signerAddress == hash.recover(signature);\\r\\n    }\\r\\n\\r\\n    // ANTI-BOT launch Mint =========\\r\\n    // function buy( bytes32 hash, bytes memory signature, string memory nonce, uint256 tokenQuantity) external payable {\\r\\n    //     require(saleLive, \\\"SALE_CLOSED\\\");\\r\\n    //     require(!presaleLive, \\\"ONLY_PRESALE\\\");\\r\\n    //     require(matchAddresSigner(hashTransaction(msg.sender, tokens, nonce),signature), \\\"DIRECT_MINT_DISALLOWED\\\");\\r\\n    //     require(!_usedNonces[nonce], \\\"HASH_USED\\\");\\r\\n    //     require(totalSupply() < MAX_SUPPLY_LIMIT, \\\"OUT_OF_STOCK\\\");\\r\\n    //     require(publicAmountMinted + tokenQuantity <= PUBLIC, \\\"EXCEED_PUBLIC\\\");\\r\\n    //     require(tokenQuantity <= LIMIT_PER_MINT, \\\"EXCEED_LIMIT_PER_MINT\\\");\\r\\n    //     require(PRICE * tokenQuantity <= msg.value, \\\"INSUFFICIENT_ETH\\\");\\r\\n\\r\\n    //     _usedNonces[nonce] = true;\\r\\n\\r\\n    //     for (uint256 i = 0; i < tokenQuantity; i++) {\\r\\n    //         publicAmountMinted++;\\r\\n    //         _safeMint(msg.sender, totalSupply() + 1);\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    // BASIC launch Mint ==========\\r\\n    function buy(uint256 tokenQuantity) external payable {\\r\\n      require(saleLive, \\\"SALE_CLOSED\\\");\\r\\n      require(!presaleLive, \\\"ONLY_PRESALE\\\");\\r\\n      require(totalSupply() < MAX_SUPPLY_LIMIT, \\\"OUT_OF_STOCK\\\");\\r\\n      require(publicAmountMinted + tokenQuantity <= PUBLIC, \\\"EXCEED_PUBLIC\\\");\\r\\n      require(tokenQuantity <= LIMIT_PER_MINT, \\\"EXCEED_LIMIT_PER_MINT\\\");\\r\\n      require(PRICE * tokenQuantity <= msg.value, \\\"INSUFFICIENT_ETH\\\");\\r\\n\\r\\n      for (uint256 i = 0; i < tokenQuantity; i++) {\\r\\n        publicAmountMinted++;\\r\\n        _safeMint(msg.sender, totalSupply() + 1);\\r\\n      }\\r\\n        (bool success,) = TREASURY_WALLET.call{value:msg.value}(\\\"\\\");\\r\\n        require( success, \\\"could not send\\\");\\r\\n    }\\r\\n\\r\\n    function gift(address[] calldata receivers) external onlyOwner {\\r\\n        require(\\r\\n            totalSupply() + receivers.length <= MAX_SUPPLY_LIMIT,\\r\\n            \\\"OUT_OF_STOCK\\\"\\r\\n        );\\r\\n        require(giftedAmountMinted + receivers.length <= GIFT, \\\"GIFTS_EMPTY\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < receivers.length; i++) {\\r\\n            giftedAmountMinted++;\\r\\n            _safeMint(receivers[i], totalSupply() + 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // function isPresaler(address addr) external view returns (bool) {\\r\\n    //     return presalerList[addr];\\r\\n    // }\\r\\n\\r\\n    // function presalePurchasedCount(address addr)\\r\\n    //     external\\r\\n    //     view\\r\\n    //     returns (uint256)\\r\\n    // {\\r\\n    //     return presalerListPurchases[addr];\\r\\n    // }\\r\\n\\r\\n    // Owner functions for enabling presale, sale, revealing and setting the provenance hash\\r\\n    function lockMetadata() external onlyOwner {\\r\\n        locked = true;\\r\\n    }\\r\\n\\r\\n    function togglePresaleStatus() external onlyOwner {\\r\\n        presaleLive = !presaleLive;\\r\\n    }\\r\\n\\r\\n    function toggleSaleStatus() external onlyOwner {\\r\\n        saleLive = !saleLive;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string calldata URI) external onlyOwner notLocked {\\r\\n        _tokenBaseURI = URI;\\r\\n        _setBaseURI(URI);\\r\\n    }\\r\\n\\r\\n    //   function mintItem(address to, string memory tokenURI)\\r\\n    //       external\\r\\n    //       onlyOwner\\r\\n    //       returns (uint256)\\r\\n    //   {\\r\\n    //       require( _tokenIds.current() < MAX_SUPPLY_LIMIT , \\\"OUT_OF_STOCK\\\");\\r\\n    //       _tokenIds.increment();\\r\\n\\r\\n    //       uint256 id = _tokenIds.current();\\r\\n    //       publicAmountMinted++;\\r\\n    //       _mint(to, id);\\r\\n    //       _setTokenURI(id, tokenURI);\\r\\n\\r\\n    //       return id;\\r\\n    //   }\\r\\n\\r\\n    //   event Request(address to, uint256 value);\\r\\n\\r\\n    //   function requestMint()\\r\\n    //       external\\r\\n    //       payable\\r\\n    //   {\\r\\n    //     require( requested++ < MAX_SUPPLY_LIMIT , \\\"DONE MINTING\\\");\\r\\n    //     require( msg.value >= PRICE, \\\"NOT ENOUGH\\\");\\r\\n    //     (bool success,) = TREASURY_WALLET.call{value:msg.value}(\\\"\\\");\\r\\n    //     require( success, \\\"could not send\\\");\\r\\n    //     emit Request(msg.sender, msg.value);\\r\\n    //   }\\r\\n    // }\\r\\n}\\r\\n\",\"keccak256\":\"0x556ee4087b51ee7dbe6d3325afb3f9e039adbff6df3639f1b42219922d5adee0\"}},\"version\":1}",
  "bytecode": "0x600b80546001600160a01b031916737e3999b106e4ef472e569b772bf7f7647d8f26ba17905560e060405260376080818152906200342760a03980516200004f91600d91602090910190620002e8565b503480156200005d57600080fd5b506040805180820182526008815267546f74616c69747960c01b6020808301919091528251808401909352600583526429b7b630b960d91b9083015290620000b56301ffc9a760e01b6001600160e01b036200024516565b8151620000ca906006906020850190620002e8565b508051620000e0906007906020840190620002e8565b50620000fc6380ac58cd60e01b6001600160e01b036200024516565b62000117635b5e139f60e01b6001600160e01b036200024516565b6200013263780e9d6360e01b6001600160e01b036200024516565b50600090506200014a6001600160e01b03620002ca16565b600a80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600d8054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526200023f93909290918301828280156200022a5780601f10620001fe576101008083540402835291602001916200022a565b820191906000526020600020905b8154815290600101906020018083116200020c57829003601f168201915b50506001600160e01b03620002cf1692505050565b6200038a565b6001600160e01b03198082161415620002a5576040805162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b335b90565b8051620002e4906009906020840190620002e8565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200032b57805160ff19168380011785556200035b565b828001600101855582156200035b579182015b828111156200035b5782518255916020019190600101906200033e565b50620003699291506200036d565b5090565b620002cc91905b8082111562000369576000815560010162000374565b61308d806200039a6000396000f3fe60806040526004361061023b5760003560e01c806376e812631161012e578063b88d4fde116100ab578063d96a094a1161006f578063d96a094a14610964578063e081b78114610981578063e582cf1514610996578063e985e9c5146109ab578063f2fde38b146109e65761023b565b8063b88d4fde14610781578063c1179a7f14610852578063c59e1c7814610867578063c87b56dd14610925578063cf3090121461094f5761023b565b806391992206116100f257806391992206146106f2578063940f1ada1461070757806395d89b411461071c578063989bdbb614610731578063a22cb465146107465761023b565b806376e81263146106895780637bffb4ce1461069e57806383a9e049146106b35780638d859f3e146106c85780638da5cb5b146106dd5761023b565b806342842e0e116101bc578063617d112611610180578063617d1126146105ed5780636352211e146106025780636c0360eb1461062c57806370a0823114610641578063715018a6146106745761023b565b806342842e0e146104db5780634f6ccce71461051e57806355072fef1461054857806355f804b31461055d57806359a12ad5146105d85761023b565b8063163e1e6111610203578063163e1e61146103a857806318160ddd1461042357806323b872dd1461044a5780632f745c591461048d5780633fae9651146104c65761023b565b806301ffc9a714610240578063049c5c491461028857806306fdde031461029f578063081812fc14610329578063095ea7b31461036f575b600080fd5b34801561024c57600080fd5b506102746004803603602081101561026357600080fd5b50356001600160e01b031916610a19565b604080519115158252519081900360200190f35b34801561029457600080fd5b5061029d610a3c565b005b3480156102ab57600080fd5b506102b4610ab1565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102ee5781810151838201526020016102d6565b50505050905090810190601f16801561031b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561033557600080fd5b506103536004803603602081101561034c57600080fd5b5035610b48565b604080516001600160a01b039092168252519081900360200190f35b34801561037b57600080fd5b5061029d6004803603604081101561039257600080fd5b506001600160a01b038135169060200135610baa565b3480156103b457600080fd5b5061029d600480360360208110156103cb57600080fd5b810190602081018135600160201b8111156103e557600080fd5b8201836020820111156103f757600080fd5b803590602001918460208302840111600160201b8311171561041857600080fd5b509092509050610c85565b34801561042f57600080fd5b50610438610dc0565b60408051918252519081900360200190f35b34801561045657600080fd5b5061029d6004803603606081101561046d57600080fd5b506001600160a01b03813581169160208101359091169060400135610dd1565b34801561049957600080fd5b50610438600480360360408110156104b057600080fd5b506001600160a01b038135169060200135610e28565b3480156104d257600080fd5b50610438610e59565b3480156104e757600080fd5b5061029d600480360360608110156104fe57600080fd5b506001600160a01b03813581169160208101359091169060400135610e5f565b34801561052a57600080fd5b506104386004803603602081101561054157600080fd5b5035610e7a565b34801561055457600080fd5b50610438610e96565b34801561056957600080fd5b5061029d6004803603602081101561058057600080fd5b810190602081018135600160201b81111561059a57600080fd5b8201836020820111156105ac57600080fd5b803590602001918460018302840111600160201b831117156105cd57600080fd5b509092509050610e9c565b3480156105e457600080fd5b50610438610f8c565b3480156105f957600080fd5b50610438610f92565b34801561060e57600080fd5b506103536004803603602081101561062557600080fd5b5035610f98565b34801561063857600080fd5b506102b4610fc6565b34801561064d57600080fd5b506104386004803603602081101561066457600080fd5b50356001600160a01b0316611027565b34801561068057600080fd5b5061029d61108f565b34801561069557600080fd5b50610438611131565b3480156106aa57600080fd5b5061029d611136565b3480156106bf57600080fd5b506102746111a2565b3480156106d457600080fd5b506104386111ab565b3480156106e957600080fd5b506103536111b7565b3480156106fe57600080fd5b506104386111c6565b34801561071357600080fd5b506104386111cb565b34801561072857600080fd5b506102b46111d1565b34801561073d57600080fd5b5061029d611232565b34801561075257600080fd5b5061029d6004803603604081101561076957600080fd5b506001600160a01b038135169060200135151561129d565b34801561078d57600080fd5b5061029d600480360360808110156107a457600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b8111156107de57600080fd5b8201836020820111156107f057600080fd5b803590602001918460018302840111600160201b8311171561081157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506113a2945050505050565b34801561085e57600080fd5b50610438611400565b61029d6004803603606081101561087d57600080fd5b810190602081018135600160201b81111561089757600080fd5b8201836020820111156108a957600080fd5b803590602001918460018302840111600160201b831117156108ca57600080fd5b919390929091602081019035600160201b8111156108e757600080fd5b8201836020820111156108f957600080fd5b803590602001918460018302840111600160201b8311171561091a57600080fd5b919350915035611406565b34801561093157600080fd5b506102b46004803603602081101561094857600080fd5b503561169c565b34801561095b57600080fd5b50610274611943565b61029d6004803603602081101561097a57600080fd5b5035611952565b34801561098d57600080fd5b50610274611be5565b3480156109a257600080fd5b50610438611bf3565b3480156109b757600080fd5b50610274600480360360408110156109ce57600080fd5b506001600160a01b0381358116916020013516611bf9565b3480156109f257600080fd5b5061029d60048036036020811015610a0957600080fd5b50356001600160a01b0316611c27565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b610a44611d20565b600a546001600160a01b03908116911614610a94576040805162461bcd60e51b81526020600482018190526024820152600080516020612f6a833981519152604482015290519081900360640190fd5b6012805461ff001981166101009182900460ff1615909102179055565b60068054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b3d5780601f10610b1257610100808354040283529160200191610b3d565b820191906000526020600020905b815481529060010190602001808311610b2057829003601f168201915b505050505090505b90565b6000610b5382611d24565b610b8e5760405162461bcd60e51b815260040180806020018281038252602c815260200180612f3e602c913960400191505060405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610bb582610f98565b9050806001600160a01b0316836001600160a01b03161415610c085760405162461bcd60e51b81526004018080602001828103825260218152602001806130066021913960400191505060405180910390fd5b806001600160a01b0316610c1a611d20565b6001600160a01b03161480610c3b5750610c3b81610c36611d20565b611bf9565b610c765760405162461bcd60e51b8152600401808060200182810382526038815260200180612e6f6038913960400191505060405180910390fd5b610c808383611d37565b505050565b610c8d611d20565b600a546001600160a01b03908116911614610cdd576040805162461bcd60e51b81526020600482018190526024820152600080516020612f6a833981519152604482015290519081900360640190fd5b6122b881610ce9610dc0565b011115610d2c576040805162461bcd60e51b815260206004820152600c60248201526b4f55545f4f465f53544f434b60a01b604482015290519081900360640190fd5b600f5460589082011115610d75576040805162461bcd60e51b815260206004820152600b60248201526a47494654535f454d50545960a81b604482015290519081900360640190fd5b60005b81811015610c8057600f80546001019055610db8838383818110610d9857fe5b905060200201356001600160a01b0316610db0610dc0565b600101611da5565b600101610d78565b6000610dcc6002611dbf565b905090565b610de2610ddc611d20565b82611dca565b610e1d5760405162461bcd60e51b81526004018080602001828103825260318152602001806130276031913960400191505060405180910390fd5b610c80838383611e6e565b6001600160a01b0382166000908152600160205260408120610e50908363ffffffff611fcc16565b90505b92915050565b600e5481565b610c80838383604051806020016040528060008152506113a2565b600080610e8e60028463ffffffff611fd816565b509392505050565b61032081565b610ea4611d20565b600a546001600160a01b03908116911614610ef4576040805162461bcd60e51b81526020600482018190526024820152600080516020612f6a833981519152604482015290519081900360640190fd5b60125462010000900460ff1615610f3c5760405162461bcd60e51b8152600401808060200182810382526024815260200180612fe26024913960400191505060405180910390fd5b610f48600d8383612c7c565b50610f8882828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ff492505050565b5050565b60115481565b6122b881565b6000610e5382604051806060016040528060298152602001612ed1602991396002919063ffffffff61200716565b60098054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b3d5780601f10610b1257610100808354040283529160200191610b3d565b60006001600160a01b03821661106e5760405162461bcd60e51b815260040180806020018281038252602a815260200180612ea7602a913960400191505060405180910390fd5b6001600160a01b0382166000908152600160205260409020610e5390611dbf565b611097611d20565b600a546001600160a01b039081169116146110e7576040805162461bcd60e51b81526020600482018190526024820152600080516020612f6a833981519152604482015290519081900360640190fd5b600a546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600a80546001600160a01b0319169055565b600581565b61113e611d20565b600a546001600160a01b0390811691161461118e576040805162461bcd60e51b81526020600482018190526024820152600080516020612f6a833981519152604482015290519081900360640190fd5b6012805460ff19811660ff90911615179055565b60125460ff1681565b67011c37937e08000081565b600a546001600160a01b031690565b605881565b60105481565b60078054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b3d5780601f10610b1257610100808354040283529160200191610b3d565b61123a611d20565b600a546001600160a01b0390811691161461128a576040805162461bcd60e51b81526020600482018190526024820152600080516020612f6a833981519152604482015290519081900360640190fd5b6012805462ff0000191662010000179055565b6112a5611d20565b6001600160a01b0316826001600160a01b0316141561130b576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060056000611318611d20565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff19169215159290921790915561135c611d20565b60408051841515815290516001600160a01b0392909216917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360200190a35050565b6113b36113ad611d20565b83611dca565b6113ee5760405162461bcd60e51b81526004018080602001828103825260318152602001806130276031913960400191505060405180910390fd5b6113fa8484848461201e565b50505050565b611f4081565b601254610100900460ff16158015611420575060125460ff165b611462576040805162461bcd60e51b815260206004820152600e60248201526d14149154d0531157d0d313d4d15160921b604482015290519081900360640190fd5b610320816011540111156114ae576040805162461bcd60e51b815260206004820152600e60248201526d4558434545445f5052495641544560901b604482015290519081900360640190fd5b348167011c37937e080000021115611500576040805162461bcd60e51b815260206004820152601060248201526f0929ca6aa8c8c9286928a9ca8be8aa8960831b604482015290519081900360640190fd5b611580611544338386868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061207092505050565b86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061216192505050565b6115ca576040805162461bcd60e51b81526020600482015260166024820152751112549150d517d352539517d11254d0531313d5d15160521b604482015290519081900360640190fd5b601180548201905560005b818110156115f1576115e933610db0610dc0565b6001016115d5565b5060405160009073836d5a18960f7ab7dcf3261248b85838475f060c9034908381818185875af1925050503d8060008114611648576040519150601f19603f3d011682016040523d82523d6000602084013e61164d565b606091505b5050905080611694576040805162461bcd60e51b815260206004820152600e60248201526d18dbdd5b19081b9bdd081cd95b9960921b604482015290519081900360640190fd5b505050505050565b60606116a782611d24565b6116e25760405162461bcd60e51b815260040180806020018281038252602f815260200180612fb3602f913960400191505060405180910390fd5b60008281526008602090815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156117775780601f1061174c57610100808354040283529160200191611777565b820191906000526020600020905b81548152906001019060200180831161175a57829003601f168201915b5050600954939450505050600260001961010060018416150201909116046117a0579050610a37565b8051156118715760098160405160200180838054600181600116156101000203166002900480156118085780601f106117e6576101008083540402835291820191611808565b820191906000526020600020905b8154815290600101906020018083116117f4575b5050825160208401908083835b602083106118345780518252601f199092019160209182019101611815565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050610a37565b600961187c8461218b565b60405160200180838054600181600116156101000203166002900480156118da5780601f106118b85761010080835404028352918201916118da565b820191906000526020600020905b8154815290600101906020018083116118c6575b5050825160208401908083835b602083106119065780518252601f1990920191602091820191016118e7565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050919050565b60125462010000900460ff1681565b601254610100900460ff1661199c576040805162461bcd60e51b815260206004820152600b60248201526a14d0531157d0d313d4d15160aa1b604482015290519081900360640190fd5b60125460ff16156119e3576040805162461bcd60e51b815260206004820152600c60248201526b4f4e4c595f50524553414c4560a01b604482015290519081900360640190fd5b6122b86119ee610dc0565b10611a2f576040805162461bcd60e51b815260206004820152600c60248201526b4f55545f4f465f53544f434b60a01b604482015290519081900360640190fd5b611f4081601054011115611a7a576040805162461bcd60e51b815260206004820152600d60248201526c4558434545445f5055424c494360981b604482015290519081900360640190fd5b6005811115611ac8576040805162461bcd60e51b8152602060048201526015602482015274115610d1515117d31253525517d4115497d3525395605a1b604482015290519081900360640190fd5b348167011c37937e080000021115611b1a576040805162461bcd60e51b815260206004820152601060248201526f0929ca6aa8c8c9286928a9ca8be8aa8960831b604482015290519081900360640190fd5b60005b81811015611b4257601080546001019055611b3a33610db0610dc0565b600101611b1d565b5060405160009073836d5a18960f7ab7dcf3261248b85838475f060c9034908381818185875af1925050503d8060008114611b99576040519150601f19603f3d011682016040523d82523d6000602084013e611b9e565b606091505b5050905080610f88576040805162461bcd60e51b815260206004820152600e60248201526d18dbdd5b19081b9bdd081cd95b9960921b604482015290519081900360640190fd5b601254610100900460ff1681565b600f5481565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b611c2f611d20565b600a546001600160a01b03908116911614611c7f576040805162461bcd60e51b81526020600482018190526024820152600080516020612f6a833981519152604482015290519081900360640190fd5b6001600160a01b038116611cc45760405162461bcd60e51b8152600401808060200182810382526026815260200180612dd76026913960400191505060405180910390fd5b600a546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600a80546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6000610e5360028363ffffffff61226616565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611d6c82610f98565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610f88828260405180602001604052806000815250612272565b6000610e53826122c4565b6000611dd582611d24565b611e105760405162461bcd60e51b815260040180806020018281038252602c815260200180612e43602c913960400191505060405180910390fd5b6000611e1b83610f98565b9050806001600160a01b0316846001600160a01b03161480611e565750836001600160a01b0316611e4b84610b48565b6001600160a01b0316145b80611e665750611e668185611bf9565b949350505050565b826001600160a01b0316611e8182610f98565b6001600160a01b031614611ec65760405162461bcd60e51b8152600401808060200182810382526029815260200180612f8a6029913960400191505060405180910390fd5b6001600160a01b038216611f0b5760405162461bcd60e51b8152600401808060200182810382526024815260200180612dfd6024913960400191505060405180910390fd5b611f16838383610c80565b611f21600082611d37565b6001600160a01b0383166000908152600160205260409020611f49908263ffffffff6122c816565b506001600160a01b0382166000908152600160205260409020611f72908263ffffffff6122d416565b50611f856002828463ffffffff6122e016565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610e5083836122f6565b6000808080611fe7868661235a565b9097909650945050505050565b8051610f88906009906020840190612cfa565b60006120148484846123d5565b90505b9392505050565b612029848484611e6e565b6120358484848461249f565b6113fa5760405162461bcd60e51b8152600401808060200182810382526032815260200180612da56032913960400191505060405180910390fd5b60008084848460405160200180846001600160a01b03166001600160a01b031660601b815260140183815260200182805190602001908083835b602083106120c95780518252601f1990920191602091820191016120aa565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040528051906020012060405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050809150509392505050565b6000612173838363ffffffff61261f16565b600b546001600160a01b039182169116149392505050565b6060816121b057506040805180820190915260018152600360fc1b6020820152610a37565b8160005b81156121c857600101600a820491506121b4565b60608167ffffffffffffffff811180156121e157600080fd5b506040519080825280601f01601f19166020018201604052801561220c576020820181803683370190505b50859350905060001982015b831561225d57600a840660300160f81b8282806001900393508151811061223b57fe5b60200101906001600160f81b031916908160001a905350600a84049350612218565b50949350505050565b6000610e508383612806565b61227c838361281e565b612289600084848461249f565b610c805760405162461bcd60e51b8152600401808060200182810382526032815260200180612da56032913960400191505060405180910390fd5b5490565b6000610e508383612958565b6000610e508383612a1e565b600061201484846001600160a01b038516612a68565b815460009082106123385760405162461bcd60e51b8152600401808060200182810382526022815260200180612d836022913960400191505060405180910390fd5b82600001828154811061234757fe5b9060005260206000200154905092915050565b81546000908190831061239e5760405162461bcd60e51b8152600401808060200182810382526022815260200180612f1c6022913960400191505060405180910390fd5b60008460000184815481106123af57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816124705760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561243557818101518382015260200161241d565b50505050905090810190601f1680156124625780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061248357fe5b9060005260206000209060020201600101549150509392505050565b60006124b3846001600160a01b0316612aff565b6124bf57506001611e66565b60606125e5630a85bd0160e11b6124d4611d20565b88878760405160240180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561254d578181015183820152602001612535565b50505050905090810190601f16801561257a5780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001612da5603291396001600160a01b038816919063ffffffff612b0516565b905060008180602001905160208110156125fe57600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b60008151604114612677576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156126e85760405162461bcd60e51b8152600401808060200182810382526022815260200180612e216022913960400191505060405180910390fd5b8060ff16601b1415801561270057508060ff16601c14155b1561273c5760405162461bcd60e51b8152600401808060200182810382526022815260200180612efa6022913960400191505060405180910390fd5b60408051600080825260208083018085528a905260ff85168385015260608301879052608083018690529251909260019260a080820193601f1981019281900390910190855afa158015612794573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166127fc576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b9695505050505050565b60009081526001919091016020526040902054151590565b6001600160a01b038216612879576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b61288281611d24565b156128d4576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b6128e060008383610c80565b6001600160a01b0382166000908152600160205260409020612908908263ffffffff6122d416565b5061291b6002828463ffffffff6122e016565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008181526001830160205260408120548015612a14578354600019808301919081019060009087908390811061298b57fe5b90600052602060002001549050808760000184815481106129a857fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806129d857fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610e53565b6000915050610e53565b6000612a2a8383612806565b612a6057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e53565b506000610e53565b600082815260018401602052604081205480612acd575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055612017565b82856000016001830381548110612ae057fe5b9060005260206000209060020201600101819055506000915050612017565b3b151590565b606061201484846000856060612b1a85612aff565b612b6b576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612baa5780518252601f199092019160209182019101612b8b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612c0c576040519150601f19603f3d011682016040523d82523d6000602084013e612c11565b606091505b50915091508115612c25579150611e669050565b805115612c355780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561243557818101518382015260200161241d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612cbd5782800160ff19823516178555612cea565b82800160010185558215612cea579182015b82811115612cea578235825591602001919060010190612ccf565b50612cf6929150612d68565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612d3b57805160ff1916838001178555612cea565b82800160010185558215612cea579182015b82811115612cea578251825591602001919060010190612d4d565b610b4591905b80821115612cf65760008155600101612d6e56fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734552433732313a207472616e7366657220746f20746865207a65726f206164647265737345434453413a20696e76616c6964207369676e6174757265202773272076616c75654552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e45434453413a20696e76616c6964207369676e6174757265202776272076616c7565456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e436f6e7472616374206d65746164617461206d6574686f647320617265206c6f636b65644552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a2646970667358221220b85294b4be13f8560d551438677ae7a41f041cc4b033b3f93b0f308e1b8341a364736f6c6343000607003368747470733a2f2f6170692d6e66742d706c616365686f6c6465722e6865726f6b756170702e636f6d2f6170692f6d657461646174612f",
  "deployedBytecode": "0x60806040526004361061023b5760003560e01c806376e812631161012e578063b88d4fde116100ab578063d96a094a1161006f578063d96a094a14610964578063e081b78114610981578063e582cf1514610996578063e985e9c5146109ab578063f2fde38b146109e65761023b565b8063b88d4fde14610781578063c1179a7f14610852578063c59e1c7814610867578063c87b56dd14610925578063cf3090121461094f5761023b565b806391992206116100f257806391992206146106f2578063940f1ada1461070757806395d89b411461071c578063989bdbb614610731578063a22cb465146107465761023b565b806376e81263146106895780637bffb4ce1461069e57806383a9e049146106b35780638d859f3e146106c85780638da5cb5b146106dd5761023b565b806342842e0e116101bc578063617d112611610180578063617d1126146105ed5780636352211e146106025780636c0360eb1461062c57806370a0823114610641578063715018a6146106745761023b565b806342842e0e146104db5780634f6ccce71461051e57806355072fef1461054857806355f804b31461055d57806359a12ad5146105d85761023b565b8063163e1e6111610203578063163e1e61146103a857806318160ddd1461042357806323b872dd1461044a5780632f745c591461048d5780633fae9651146104c65761023b565b806301ffc9a714610240578063049c5c491461028857806306fdde031461029f578063081812fc14610329578063095ea7b31461036f575b600080fd5b34801561024c57600080fd5b506102746004803603602081101561026357600080fd5b50356001600160e01b031916610a19565b604080519115158252519081900360200190f35b34801561029457600080fd5b5061029d610a3c565b005b3480156102ab57600080fd5b506102b4610ab1565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102ee5781810151838201526020016102d6565b50505050905090810190601f16801561031b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561033557600080fd5b506103536004803603602081101561034c57600080fd5b5035610b48565b604080516001600160a01b039092168252519081900360200190f35b34801561037b57600080fd5b5061029d6004803603604081101561039257600080fd5b506001600160a01b038135169060200135610baa565b3480156103b457600080fd5b5061029d600480360360208110156103cb57600080fd5b810190602081018135600160201b8111156103e557600080fd5b8201836020820111156103f757600080fd5b803590602001918460208302840111600160201b8311171561041857600080fd5b509092509050610c85565b34801561042f57600080fd5b50610438610dc0565b60408051918252519081900360200190f35b34801561045657600080fd5b5061029d6004803603606081101561046d57600080fd5b506001600160a01b03813581169160208101359091169060400135610dd1565b34801561049957600080fd5b50610438600480360360408110156104b057600080fd5b506001600160a01b038135169060200135610e28565b3480156104d257600080fd5b50610438610e59565b3480156104e757600080fd5b5061029d600480360360608110156104fe57600080fd5b506001600160a01b03813581169160208101359091169060400135610e5f565b34801561052a57600080fd5b506104386004803603602081101561054157600080fd5b5035610e7a565b34801561055457600080fd5b50610438610e96565b34801561056957600080fd5b5061029d6004803603602081101561058057600080fd5b810190602081018135600160201b81111561059a57600080fd5b8201836020820111156105ac57600080fd5b803590602001918460018302840111600160201b831117156105cd57600080fd5b509092509050610e9c565b3480156105e457600080fd5b50610438610f8c565b3480156105f957600080fd5b50610438610f92565b34801561060e57600080fd5b506103536004803603602081101561062557600080fd5b5035610f98565b34801561063857600080fd5b506102b4610fc6565b34801561064d57600080fd5b506104386004803603602081101561066457600080fd5b50356001600160a01b0316611027565b34801561068057600080fd5b5061029d61108f565b34801561069557600080fd5b50610438611131565b3480156106aa57600080fd5b5061029d611136565b3480156106bf57600080fd5b506102746111a2565b3480156106d457600080fd5b506104386111ab565b3480156106e957600080fd5b506103536111b7565b3480156106fe57600080fd5b506104386111c6565b34801561071357600080fd5b506104386111cb565b34801561072857600080fd5b506102b46111d1565b34801561073d57600080fd5b5061029d611232565b34801561075257600080fd5b5061029d6004803603604081101561076957600080fd5b506001600160a01b038135169060200135151561129d565b34801561078d57600080fd5b5061029d600480360360808110156107a457600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b8111156107de57600080fd5b8201836020820111156107f057600080fd5b803590602001918460018302840111600160201b8311171561081157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506113a2945050505050565b34801561085e57600080fd5b50610438611400565b61029d6004803603606081101561087d57600080fd5b810190602081018135600160201b81111561089757600080fd5b8201836020820111156108a957600080fd5b803590602001918460018302840111600160201b831117156108ca57600080fd5b919390929091602081019035600160201b8111156108e757600080fd5b8201836020820111156108f957600080fd5b803590602001918460018302840111600160201b8311171561091a57600080fd5b919350915035611406565b34801561093157600080fd5b506102b46004803603602081101561094857600080fd5b503561169c565b34801561095b57600080fd5b50610274611943565b61029d6004803603602081101561097a57600080fd5b5035611952565b34801561098d57600080fd5b50610274611be5565b3480156109a257600080fd5b50610438611bf3565b3480156109b757600080fd5b50610274600480360360408110156109ce57600080fd5b506001600160a01b0381358116916020013516611bf9565b3480156109f257600080fd5b5061029d60048036036020811015610a0957600080fd5b50356001600160a01b0316611c27565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b610a44611d20565b600a546001600160a01b03908116911614610a94576040805162461bcd60e51b81526020600482018190526024820152600080516020612f6a833981519152604482015290519081900360640190fd5b6012805461ff001981166101009182900460ff1615909102179055565b60068054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b3d5780601f10610b1257610100808354040283529160200191610b3d565b820191906000526020600020905b815481529060010190602001808311610b2057829003601f168201915b505050505090505b90565b6000610b5382611d24565b610b8e5760405162461bcd60e51b815260040180806020018281038252602c815260200180612f3e602c913960400191505060405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610bb582610f98565b9050806001600160a01b0316836001600160a01b03161415610c085760405162461bcd60e51b81526004018080602001828103825260218152602001806130066021913960400191505060405180910390fd5b806001600160a01b0316610c1a611d20565b6001600160a01b03161480610c3b5750610c3b81610c36611d20565b611bf9565b610c765760405162461bcd60e51b8152600401808060200182810382526038815260200180612e6f6038913960400191505060405180910390fd5b610c808383611d37565b505050565b610c8d611d20565b600a546001600160a01b03908116911614610cdd576040805162461bcd60e51b81526020600482018190526024820152600080516020612f6a833981519152604482015290519081900360640190fd5b6122b881610ce9610dc0565b011115610d2c576040805162461bcd60e51b815260206004820152600c60248201526b4f55545f4f465f53544f434b60a01b604482015290519081900360640190fd5b600f5460589082011115610d75576040805162461bcd60e51b815260206004820152600b60248201526a47494654535f454d50545960a81b604482015290519081900360640190fd5b60005b81811015610c8057600f80546001019055610db8838383818110610d9857fe5b905060200201356001600160a01b0316610db0610dc0565b600101611da5565b600101610d78565b6000610dcc6002611dbf565b905090565b610de2610ddc611d20565b82611dca565b610e1d5760405162461bcd60e51b81526004018080602001828103825260318152602001806130276031913960400191505060405180910390fd5b610c80838383611e6e565b6001600160a01b0382166000908152600160205260408120610e50908363ffffffff611fcc16565b90505b92915050565b600e5481565b610c80838383604051806020016040528060008152506113a2565b600080610e8e60028463ffffffff611fd816565b509392505050565b61032081565b610ea4611d20565b600a546001600160a01b03908116911614610ef4576040805162461bcd60e51b81526020600482018190526024820152600080516020612f6a833981519152604482015290519081900360640190fd5b60125462010000900460ff1615610f3c5760405162461bcd60e51b8152600401808060200182810382526024815260200180612fe26024913960400191505060405180910390fd5b610f48600d8383612c7c565b50610f8882828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ff492505050565b5050565b60115481565b6122b881565b6000610e5382604051806060016040528060298152602001612ed1602991396002919063ffffffff61200716565b60098054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b3d5780601f10610b1257610100808354040283529160200191610b3d565b60006001600160a01b03821661106e5760405162461bcd60e51b815260040180806020018281038252602a815260200180612ea7602a913960400191505060405180910390fd5b6001600160a01b0382166000908152600160205260409020610e5390611dbf565b611097611d20565b600a546001600160a01b039081169116146110e7576040805162461bcd60e51b81526020600482018190526024820152600080516020612f6a833981519152604482015290519081900360640190fd5b600a546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600a80546001600160a01b0319169055565b600581565b61113e611d20565b600a546001600160a01b0390811691161461118e576040805162461bcd60e51b81526020600482018190526024820152600080516020612f6a833981519152604482015290519081900360640190fd5b6012805460ff19811660ff90911615179055565b60125460ff1681565b67011c37937e08000081565b600a546001600160a01b031690565b605881565b60105481565b60078054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b3d5780601f10610b1257610100808354040283529160200191610b3d565b61123a611d20565b600a546001600160a01b0390811691161461128a576040805162461bcd60e51b81526020600482018190526024820152600080516020612f6a833981519152604482015290519081900360640190fd5b6012805462ff0000191662010000179055565b6112a5611d20565b6001600160a01b0316826001600160a01b0316141561130b576040805162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015290519081900360640190fd5b8060056000611318611d20565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff19169215159290921790915561135c611d20565b60408051841515815290516001600160a01b0392909216917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319181900360200190a35050565b6113b36113ad611d20565b83611dca565b6113ee5760405162461bcd60e51b81526004018080602001828103825260318152602001806130276031913960400191505060405180910390fd5b6113fa8484848461201e565b50505050565b611f4081565b601254610100900460ff16158015611420575060125460ff165b611462576040805162461bcd60e51b815260206004820152600e60248201526d14149154d0531157d0d313d4d15160921b604482015290519081900360640190fd5b610320816011540111156114ae576040805162461bcd60e51b815260206004820152600e60248201526d4558434545445f5052495641544560901b604482015290519081900360640190fd5b348167011c37937e080000021115611500576040805162461bcd60e51b815260206004820152601060248201526f0929ca6aa8c8c9286928a9ca8be8aa8960831b604482015290519081900360640190fd5b611580611544338386868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061207092505050565b86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061216192505050565b6115ca576040805162461bcd60e51b81526020600482015260166024820152751112549150d517d352539517d11254d0531313d5d15160521b604482015290519081900360640190fd5b601180548201905560005b818110156115f1576115e933610db0610dc0565b6001016115d5565b5060405160009073836d5a18960f7ab7dcf3261248b85838475f060c9034908381818185875af1925050503d8060008114611648576040519150601f19603f3d011682016040523d82523d6000602084013e61164d565b606091505b5050905080611694576040805162461bcd60e51b815260206004820152600e60248201526d18dbdd5b19081b9bdd081cd95b9960921b604482015290519081900360640190fd5b505050505050565b60606116a782611d24565b6116e25760405162461bcd60e51b815260040180806020018281038252602f815260200180612fb3602f913960400191505060405180910390fd5b60008281526008602090815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156117775780601f1061174c57610100808354040283529160200191611777565b820191906000526020600020905b81548152906001019060200180831161175a57829003601f168201915b5050600954939450505050600260001961010060018416150201909116046117a0579050610a37565b8051156118715760098160405160200180838054600181600116156101000203166002900480156118085780601f106117e6576101008083540402835291820191611808565b820191906000526020600020905b8154815290600101906020018083116117f4575b5050825160208401908083835b602083106118345780518252601f199092019160209182019101611815565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050610a37565b600961187c8461218b565b60405160200180838054600181600116156101000203166002900480156118da5780601f106118b85761010080835404028352918201916118da565b820191906000526020600020905b8154815290600101906020018083116118c6575b5050825160208401908083835b602083106119065780518252601f1990920191602091820191016118e7565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052915050919050565b60125462010000900460ff1681565b601254610100900460ff1661199c576040805162461bcd60e51b815260206004820152600b60248201526a14d0531157d0d313d4d15160aa1b604482015290519081900360640190fd5b60125460ff16156119e3576040805162461bcd60e51b815260206004820152600c60248201526b4f4e4c595f50524553414c4560a01b604482015290519081900360640190fd5b6122b86119ee610dc0565b10611a2f576040805162461bcd60e51b815260206004820152600c60248201526b4f55545f4f465f53544f434b60a01b604482015290519081900360640190fd5b611f4081601054011115611a7a576040805162461bcd60e51b815260206004820152600d60248201526c4558434545445f5055424c494360981b604482015290519081900360640190fd5b6005811115611ac8576040805162461bcd60e51b8152602060048201526015602482015274115610d1515117d31253525517d4115497d3525395605a1b604482015290519081900360640190fd5b348167011c37937e080000021115611b1a576040805162461bcd60e51b815260206004820152601060248201526f0929ca6aa8c8c9286928a9ca8be8aa8960831b604482015290519081900360640190fd5b60005b81811015611b4257601080546001019055611b3a33610db0610dc0565b600101611b1d565b5060405160009073836d5a18960f7ab7dcf3261248b85838475f060c9034908381818185875af1925050503d8060008114611b99576040519150601f19603f3d011682016040523d82523d6000602084013e611b9e565b606091505b5050905080610f88576040805162461bcd60e51b815260206004820152600e60248201526d18dbdd5b19081b9bdd081cd95b9960921b604482015290519081900360640190fd5b601254610100900460ff1681565b600f5481565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b611c2f611d20565b600a546001600160a01b03908116911614611c7f576040805162461bcd60e51b81526020600482018190526024820152600080516020612f6a833981519152604482015290519081900360640190fd5b6001600160a01b038116611cc45760405162461bcd60e51b8152600401808060200182810382526026815260200180612dd76026913960400191505060405180910390fd5b600a546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600a80546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6000610e5360028363ffffffff61226616565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611d6c82610f98565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610f88828260405180602001604052806000815250612272565b6000610e53826122c4565b6000611dd582611d24565b611e105760405162461bcd60e51b815260040180806020018281038252602c815260200180612e43602c913960400191505060405180910390fd5b6000611e1b83610f98565b9050806001600160a01b0316846001600160a01b03161480611e565750836001600160a01b0316611e4b84610b48565b6001600160a01b0316145b80611e665750611e668185611bf9565b949350505050565b826001600160a01b0316611e8182610f98565b6001600160a01b031614611ec65760405162461bcd60e51b8152600401808060200182810382526029815260200180612f8a6029913960400191505060405180910390fd5b6001600160a01b038216611f0b5760405162461bcd60e51b8152600401808060200182810382526024815260200180612dfd6024913960400191505060405180910390fd5b611f16838383610c80565b611f21600082611d37565b6001600160a01b0383166000908152600160205260409020611f49908263ffffffff6122c816565b506001600160a01b0382166000908152600160205260409020611f72908263ffffffff6122d416565b50611f856002828463ffffffff6122e016565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610e5083836122f6565b6000808080611fe7868661235a565b9097909650945050505050565b8051610f88906009906020840190612cfa565b60006120148484846123d5565b90505b9392505050565b612029848484611e6e565b6120358484848461249f565b6113fa5760405162461bcd60e51b8152600401808060200182810382526032815260200180612da56032913960400191505060405180910390fd5b60008084848460405160200180846001600160a01b03166001600160a01b031660601b815260140183815260200182805190602001908083835b602083106120c95780518252601f1990920191602091820191016120aa565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040528051906020012060405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050809150509392505050565b6000612173838363ffffffff61261f16565b600b546001600160a01b039182169116149392505050565b6060816121b057506040805180820190915260018152600360fc1b6020820152610a37565b8160005b81156121c857600101600a820491506121b4565b60608167ffffffffffffffff811180156121e157600080fd5b506040519080825280601f01601f19166020018201604052801561220c576020820181803683370190505b50859350905060001982015b831561225d57600a840660300160f81b8282806001900393508151811061223b57fe5b60200101906001600160f81b031916908160001a905350600a84049350612218565b50949350505050565b6000610e508383612806565b61227c838361281e565b612289600084848461249f565b610c805760405162461bcd60e51b8152600401808060200182810382526032815260200180612da56032913960400191505060405180910390fd5b5490565b6000610e508383612958565b6000610e508383612a1e565b600061201484846001600160a01b038516612a68565b815460009082106123385760405162461bcd60e51b8152600401808060200182810382526022815260200180612d836022913960400191505060405180910390fd5b82600001828154811061234757fe5b9060005260206000200154905092915050565b81546000908190831061239e5760405162461bcd60e51b8152600401808060200182810382526022815260200180612f1c6022913960400191505060405180910390fd5b60008460000184815481106123af57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b600082815260018401602052604081205482816124705760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561243557818101518382015260200161241d565b50505050905090810190601f1680156124625780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061248357fe5b9060005260206000209060020201600101549150509392505050565b60006124b3846001600160a01b0316612aff565b6124bf57506001611e66565b60606125e5630a85bd0160e11b6124d4611d20565b88878760405160240180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561254d578181015183820152602001612535565b50505050905090810190601f16801561257a5780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050604051806060016040528060328152602001612da5603291396001600160a01b038816919063ffffffff612b0516565b905060008180602001905160208110156125fe57600080fd5b50516001600160e01b031916630a85bd0160e11b1492505050949350505050565b60008151604114612677576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156126e85760405162461bcd60e51b8152600401808060200182810382526022815260200180612e216022913960400191505060405180910390fd5b8060ff16601b1415801561270057508060ff16601c14155b1561273c5760405162461bcd60e51b8152600401808060200182810382526022815260200180612efa6022913960400191505060405180910390fd5b60408051600080825260208083018085528a905260ff85168385015260608301879052608083018690529251909260019260a080820193601f1981019281900390910190855afa158015612794573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166127fc576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b9695505050505050565b60009081526001919091016020526040902054151590565b6001600160a01b038216612879576040805162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015290519081900360640190fd5b61288281611d24565b156128d4576040805162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015290519081900360640190fd5b6128e060008383610c80565b6001600160a01b0382166000908152600160205260409020612908908263ffffffff6122d416565b5061291b6002828463ffffffff6122e016565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008181526001830160205260408120548015612a14578354600019808301919081019060009087908390811061298b57fe5b90600052602060002001549050808760000184815481106129a857fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806129d857fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610e53565b6000915050610e53565b6000612a2a8383612806565b612a6057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e53565b506000610e53565b600082815260018401602052604081205480612acd575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055612017565b82856000016001830381548110612ae057fe5b9060005260206000209060020201600101819055506000915050612017565b3b151590565b606061201484846000856060612b1a85612aff565b612b6b576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612baa5780518252601f199092019160209182019101612b8b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612c0c576040519150601f19603f3d011682016040523d82523d6000602084013e612c11565b606091505b50915091508115612c25579150611e669050565b805115612c355780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561243557818101518382015260200161241d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612cbd5782800160ff19823516178555612cea565b82800160010185558215612cea579182015b82811115612cea578235825591602001919060010190612ccf565b50612cf6929150612d68565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612d3b57805160ff1916838001178555612cea565b82800160010185558215612cea579182015b82811115612cea578251825591602001919060010190612d4d565b610b4591905b80821115612cf65760008155600101612d6e56fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734552433732313a207472616e7366657220746f20746865207a65726f206164647265737345434453413a20696e76616c6964207369676e6174757265202773272076616c75654552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e45434453413a20696e76616c6964207369676e6174757265202776272076616c7565456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e436f6e7472616374206d65746164617461206d6574686f647320617265206c6f636b65644552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a2646970667358221220b85294b4be13f8560d551438677ae7a41f041cc4b033b3f93b0f308e1b8341a364736f6c63430006070033",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "baseURI()": {
        "details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}.     * Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 242,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 539,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "_holderTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(UintSet)2616_storage)"
      },
      {
        "astId": 541,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "_tokenOwners",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(UintToAddressMap)2141_storage"
      },
      {
        "astId": 545,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 551,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 553,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "_name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 555,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "_symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 559,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 561,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "_baseURI",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 30,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2817,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "_signerAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 2822,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)1821_storage"
      },
      {
        "astId": 2825,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "_tokenBaseURI",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 2861,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "requested",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2863,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "giftedAmountMinted",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2865,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "publicAmountMinted",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2867,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "privateAmountMinted",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2869,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "presaleLive",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 2871,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "saleLive",
        "offset": 1,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 2873,
        "contract": "contracts/YourCollectible.sol:Totality",
        "label": "locked",
        "offset": 2,
        "slot": "18",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(MapEntry)1869_storage)dyn_storage": {
        "base": "t_struct(MapEntry)1869_storage",
        "encoding": "dynamic_array",
        "label": "struct EnumerableMap.MapEntry[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(UintSet)2616_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)2616_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1821_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1820,
            "contract": "contracts/YourCollectible.sol:Totality",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Map)1877_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 1872,
            "contract": "contracts/YourCollectible.sol:Totality",
            "label": "_entries",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(MapEntry)1869_storage)dyn_storage"
          },
          {
            "astId": 1876,
            "contract": "contracts/YourCollectible.sol:Totality",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MapEntry)1869_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.MapEntry",
        "members": [
          {
            "astId": 1866,
            "contract": "contracts/YourCollectible.sol:Totality",
            "label": "_key",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1868,
            "contract": "contracts/YourCollectible.sol:Totality",
            "label": "_value",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2327_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2322,
            "contract": "contracts/YourCollectible.sol:Totality",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2326,
            "contract": "contracts/YourCollectible.sol:Totality",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)2616_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 2615,
            "contract": "contracts/YourCollectible.sol:Totality",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2327_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToAddressMap)2141_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.UintToAddressMap",
        "members": [
          {
            "astId": 2140,
            "contract": "contracts/YourCollectible.sol:Totality",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)1877_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}